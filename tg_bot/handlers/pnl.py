import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tg_bot.models import sessionmaker, engine
from tg_bot.models import Shop, CashedShopData, Advertisement, Penalty
from tg_bot.models import (
    TaxSystemType, TaxSystemSetting,
    ProductCost, RegularExpense, OneTimeExpense
)
from tg_bot.keyboards.pnl_menu import pnl_period_keyboard
from tg_bot.services.wb_api import fetch_full_report
from tg_bot.states.pnl_states import PNLStates
from dateutil.relativedelta import relativedelta

logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é P&L
async def pnl_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    async with state.proxy() as data:
        if 'shop' not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return
    
    keyboard = pnl_period_keyboard()
    await callback.message.answer(
        "üìä <b>–†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤ (P&L)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=keyboard
    )
    await PNLStates.waiting_for_period.set()

# –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞
async def calculate_metrics_from_report(report_data, shop_id, start_date, end_date):
    session = sessionmaker()(bind=engine)
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        revenue = 0
        logistics = 0
        storage_fee = 0
        commission = 0
        cost_of_goods = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        articles = {}
        for item in report_data:
            # –í—ã—Ä—É—á–∫–∞
            retail_price = item.get('retail_price_withdisc_rub', 0)
            quantity = item.get('quantity', 0)
            revenue += retail_price * quantity
            
            # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
            logistics += item.get('delivery_rub', 0)
            
            # –•—Ä–∞–Ω–µ–Ω–∏–µ
            storage_fee += item.get('storage_fee', 0)
            
            # –ö–æ–º–∏—Å—Å–∏—è WB
            # print(item.get('ppvz_sales_commission'), item.get('ppvz_vw'), item.get('ppvz_vw_nds'))
            commission += item.get('ppvz_sales_commission', 0) + item.get('ppvz_vw', 0) + item.get('ppvz_vw_nds', 0)
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
            article = item.get('nm_id')
            if article:
                if article not in articles:
                    articles[article] = 0
                articles[article] += quantity
        
        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        for article, quantity in articles.items():
            print(article, quantity)
            product_cost = session.query(ProductCost).filter(
                ProductCost.shop_id == shop_id,
                ProductCost.article == article
            ).first()
            if product_cost:
                cost_of_goods += product_cost.cost * quantity
        
        # –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
        tax_setting = session.query(TaxSystemSetting).filter(
            TaxSystemSetting.shop_id == shop_id
        ).first()
        tax_rate = 0.06 if tax_setting and tax_setting.tax_system == TaxSystemType.USN_6 else 0.0
        tax = revenue * tax_rate
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        regular_expenses = 0
        days_in_period = (end_date - start_date).days + 1
        for expense in session.query(RegularExpense).filter(RegularExpense.shop_id == shop_id):
            if expense.frequency == "daily":
                regular_expenses += expense.amount * days_in_period
            elif expense.frequency == "weekly":
                regular_expenses += expense.amount * (days_in_period / 7)
            elif expense.frequency == "monthly":
                regular_expenses += expense.amount * (days_in_period / 30)
        advert = sum(i.amount for i in session.query(Advertisement).filter(Advertisement.shop_id == shop_id).filter(Advertisement.date >= start_date).all())

        # –£–¥–µ—Ä–∂–∞–Ω–∏—è
        stops = sum(i.sum for i in session.query(Penalty).filter(Penalty.date >= start_date).all())

        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        net_profit = revenue - (commission + logistics + storage_fee + tax + cost_of_goods + regular_expenses + advert + stops)
        
        # –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
        profitability = (net_profit / revenue) * 100 if revenue > 0 else 0

        # –†–µ–∫–ª–∞–º–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã


        # –†–∞–∑–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ)
        one_time_expenses = session.query(OneTimeExpense).filter(OneTimeExpense.shop_id == shop_id).all()
        total_one_time = sum(expense.amount for expense in one_time_expenses)
        
        # –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        if net_profit > 0 and total_one_time > 0:
            months = total_one_time / net_profit
            payback_period = f"{months:.1f} –º–µ—Å—è—Ü–µ–≤"
        
        # ROI
        roi = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        if total_one_time > 0:
            roi_value = (net_profit / total_one_time) * 100
            roi = f"{roi_value:.1f}%"
            if roi_value > 100:
                roi += " ‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –æ–∫—É–ø–∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è!"
        
        return {
            "revenue": revenue,
            "commission": commission,
            "logistics": logistics,
            "storage": storage_fee,
            "cost_of_goods": cost_of_goods,
            "tax": tax,
            "regular_expenses": regular_expenses,
            "net_profit": net_profit,
            "profitability": profitability,
            "payback_period": payback_period,
            "roi": roi,
            "advert": advert,
            "stops": stops
        }
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
async def select_pnl_period_callback(callback: types.CallbackQuery, state: FSMContext):
    period_type = callback.data.split('_')[1]  # day, week, month, year
    await callback.message.edit_text(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 10 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–º –ø–æ–¥—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö... (–∏–Ω–æ–≥–¥–∞ –¥–æ–ª—å—à–µ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 2—Ö –º–∏–Ω—É—Ç)")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
    now = datetime.utcnow()
    if period_type == "week":
        current_start = now - timedelta(weeks=1)
        current_end = now
        previous_start = now - timedelta(weeks=2)
        previous_end = now - timedelta(weeks=1)
        period_name = "–Ω–µ–¥–µ–ª—é"
    elif period_type == "month":
        current_start = now - relativedelta(months=1)
        current_end = now
        previous_start = now - relativedelta(months=2)
        previous_end = now - relativedelta(months=1)
        period_name = "–º–µ—Å—è—Ü"
    else:  # year
        current_start = now - relativedelta(years=1)
        current_end = now
        previous_start = now - relativedelta(years=2)
        previous_end = now - relativedelta(years=1)
        period_name = "–≥–æ–¥"
    
    async with state.proxy() as data:
        shop_id = data['shop']['id']
        shop_name = data['shop']['name'] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        api_token = data['shop']['api_token']
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
    current_report = {}
    session = sessionmaker(bind=engine)()
    cashed = session.query(CashedShopData).filter(CashedShopData.shop_id == shop_id).first()
    if period_type == "week":
        current_report = cashed.cashed_week
    elif period_type == "month":
        current_report = cashed.cashed_month
    else:  # year
        current_report = cashed.cashed_year
    if not current_report:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)

        return


    previous_report = await fetch_full_report(api_token, previous_start, previous_end)
    await callback.message.edit_text(text="–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å —á—É—Ç—å ...")
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    current_metrics = await calculate_metrics_from_report(
        current_report, shop_id, current_start, current_end
    )
    
    previous_metrics = await calculate_metrics_from_report(
        previous_report or [], shop_id, previous_start, previous_end
    ) if previous_report else None
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É
    revenue_change = current_metrics["revenue"] - (previous_metrics["revenue"] if previous_metrics else 0)
    profit_change = current_metrics["net_profit"] - (previous_metrics["net_profit"] if previous_metrics else 0)
    
    revenue_indicator = "üü¢‚ñ≤" if revenue_change >= 0 else "üî¥‚ñº"
    profit_indicator = "üü¢‚ñ≤" if profit_change >= 0 else "üî¥‚ñº"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    text = (
        f"üìä <b>–û—Ç—á–µ—Ç P&L –¥–ª—è {shop_name}</b>\n"
        f"–ü–µ—Ä–∏–æ–¥: <b>–∑–∞ {period_name}</b>\n\n"
        
        "<u>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</u>\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: {current_metrics['revenue']:.2f} —Ä—É–±. "
        f"({revenue_indicator} {abs(revenue_change):.2f})\n"
        f"üì¶ –ö–æ–º–∏—Å—Å–∏–∏ WB: {current_metrics['commission']:.2f} —Ä—É–±.\n"
        f"üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {current_metrics['logistics']:.2f} —Ä—É–±.\n"
        f"üè≠ –•—Ä–∞–Ω–µ–Ω–∏–µ: {current_metrics['storage']:.2f} —Ä—É–±.\n"
        f"üè∑Ô∏è –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_metrics['cost_of_goods']:.2f} —Ä—É–±.\n"
        f"üèõÔ∏è –ù–∞–ª–æ–≥: {current_metrics['tax']:.2f} —Ä—É–±.\n"
        f"üíº –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {current_metrics['regular_expenses']:.2f} —Ä—É–±.\n"
        f"üíµ –†–µ–∫–ª–∞–º–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {current_metrics['advert']} —Ä—É–±.\n"
        f"üíµ –ü—Ä–æ—á–∏–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {current_metrics['stops']} —Ä—É–±.\n"
        f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {current_metrics['net_profit']:.2f} —Ä—É–±. "
        
        f"({profit_indicator} {abs(profit_change):.2f})\n\n"
        
        "<u>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</u>\n"
        f"üìà –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {current_metrics['profitability']:.1f}%\n"
        f"‚è≥ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {current_metrics['payback_period']}\n"
        f"üìä ROI: {current_metrics['roi']}\n\n"
        
        "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ä–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö WB API</i>"
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pnl"))
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    # await state.finish()

def register_pnl_handlers(dp):
    dp.register_callback_query_handler(pnl_callback, text="pnl", state="*")
    dp.register_callback_query_handler(
        select_pnl_period_callback, 
        lambda c: c.data.startswith("pnlperiod_"), 
        state=PNLStates.waiting_for_period
    )