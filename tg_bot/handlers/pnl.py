import logging
import asyncio
import openpyxl
from openpyxl import load_workbook
import io
from datetime import datetime, timedelta
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from tg_bot.models import sessionmaker, engine
from tg_bot.models import Shop, CashedShopData, Advertisement, Penalty
from tg_bot.models import (
    TaxSystemType, TaxSystemSetting,
    ProductCost, RegularExpense, OneTimeExpense
)
from tg_bot.keyboards.pnl_menu import pnl_period_keyboard
from tg_bot.services.wb_api import fetch_full_report, fetch_report_detail_by_period
from tg_bot.states.pnl_states import PNLStates
from dateutil.relativedelta import relativedelta

logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é P&L
async def pnl_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    async with state.proxy() as data:
        if 'shop' not in data:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω", show_alert=True)
            return
    
    keyboard = pnl_period_keyboard()
    await callback.message.answer(
        "üìä <b>–†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤ (P&L)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=keyboard
    )
    await PNLStates.waiting_for_period.set()

async def generate_pnl_excel_report(shop_id: int, shop_api_token: str, start_date: datetime, end_date: datetime, shop_name: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞ PNL"""


    session = sessionmaker()(bind=engine)
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WB API

    if True:
        loop = asyncio.get_event_loop()
        report_data = await loop.run_in_executor(
            None,
            fetch_report_detail_by_period,
            shop_api_token,
            start_date,
            end_date
        )    
    #report_data = await fetch_report_detail_by_period(shop_api_token, start_date, end_date)
    if not report_data:
        return None
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cashed_data = (
            session.query(CashedShopData)
            .filter(CashedShopData.shop_id == shop_id)
            .first()
        )
        if not cashed_data or not cashed_data.cashed_all:
            return None


        # --- –î–û–ë–ê–í–õ–ï–ù–û: –ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç ---
        is_year_report = (
            start_date.month == 1 and start_date.day == 1 and
            (end_date.year == start_date.year)
        )

        if is_year_report:
            try:
                wb = load_workbook("pnl_template_year.xlsx")
            except FileNotFoundError:
                wb = openpyxl.Workbook()
                ws = wb.active
                ws.title = "P&L Year"
            ws = wb.active

            year = start_date.year
            # –ü–µ—Ä–∏–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞: —Å 1 —è–Ω–≤–∞—Ä—è –ø–æ end_date
            year_start = datetime(year, 1, 1)
            year_end = end_date
            # –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞: —Å 1 —è–Ω–≤–∞—Ä—è –ø–æ 31 –¥–µ–∫–∞–±—Ä—è –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
            prev_year_start = datetime(year - 1, 1, 1)
            prev_year_end = datetime(year - 1, 12, 31)

            # –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
            current_year_data = []
            prev_year_data = []
            for item in report_data:
                try:
                    sale_date = datetime.strptime(item.get("sale_dt", "")[:10], "%Y-%m-%d")
                    if year_start <= sale_date <= year_end:
                        current_year_data.append(item)
                    elif prev_year_start <= sale_date <= prev_year_end:
                        prev_year_data.append(item)
                except (ValueError, TypeError):
                    continue

            current_metrics = await calculate_metrics_from_report(
                current_year_data, shop_id, year_start, year_end
            )
            previous_metrics = await calculate_metrics_from_report(
                prev_year_data, shop_id, prev_year_start, prev_year_end
            )

            current_values = [
                current_metrics.get("orders", 0),
                current_metrics.get("sales", 0),
                current_metrics.get("commission", 0),
                current_metrics.get("cost_of_goods", 0),
                current_metrics.get("tax", 0),
                current_metrics.get("logistics", 0),
                current_metrics.get("storage", 0),
                current_metrics.get("stops", 0),
                current_metrics.get("advert", 0),
                current_metrics.get("revenue", 0),
                current_metrics.get("net_profit", 0)
            ]
            previous_values = [
                previous_metrics.get("orders", 0),
                previous_metrics.get("sales", 0),
                previous_metrics.get("commission", 0),
                previous_metrics.get("cost_of_goods", 0),
                previous_metrics.get("tax", 0),
                previous_metrics.get("logistics", 0),
                previous_metrics.get("storage", 0),
                previous_metrics.get("stops", 0),
                previous_metrics.get("advert", 0),
                previous_metrics.get("revenue", 0),
                previous_metrics.get("net_profit", 0)
            ]

            # C3‚ÄìC13: –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –≥–æ–¥
            for i, value in enumerate(current_values, 3):
                ws[f'C{i}'] = value

            # E3‚ÄìE13: –¥–∏–Ω–∞–º–∏–∫–∞ –≥–æ–¥ –∫ –≥–æ–¥—É
            for i in range(3, 14):
                curr = current_values[i-3]
                prev = previous_values[i-3]
                if prev != 0:
                    ws[f'E{i}'] = (curr - prev) / prev
                else:
                    ws[f'E{i}'] = 0 if curr == 0 else 1

            # F3‚ÄìQ13: –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (F ‚Äî —è–Ω–≤–∞—Ä—å, ..., Q ‚Äî –¥–µ–∫–∞–±—Ä—å)
            for month in range(1, 13):
                month_start = datetime(year, month, 1)
                if month == 12:
                    month_end = datetime(year, 12, 31)
                else:
                    month_end = datetime(year, month + 1, 1) - timedelta(days=1)
                if month_end > end_date:
                    month_end = end_date
                if month_start > end_date:
                    continue
                month_data = [
                    item for item in current_year_data
                    if month_start <= datetime.strptime(item.get("sale_dt", "")[:10], "%Y-%m-%d") <= month_end
                ]
                if not month_data:
                    continue  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —è—á–µ–π–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—É—Å—Ç—ã–º–∏
                month_metrics = await calculate_metrics_from_report(month_data, shop_id, month_start, month_end)
                month_values = [
                    month_metrics.get("orders", 0),
                    month_metrics.get("sales", 0),
                    month_metrics.get("commission", 0),
                    month_metrics.get("cost_of_goods", 0),
                    month_metrics.get("tax", 0),
                    month_metrics.get("logistics", 0),
                    month_metrics.get("storage", 0),
                    month_metrics.get("stops", 0),
                    month_metrics.get("advert", 0),
                    month_metrics.get("revenue", 0),
                    month_metrics.get("net_profit", 0)
                ]
                col_letter = openpyxl.utils.get_column_letter(6 + month - 1)  # F=6, ..., Q=17
                for row, value in enumerate(month_values, 3):
                    ws[f'{col_letter}{row}'] = value

            return wb

        # --- –î–û–ë–ê–í–õ–ï–ù–û: –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ---
        is_week_report = (
            (end_date - start_date).days <= 8 and  # 7 –∏–ª–∏ 8 –¥–Ω–µ–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            start_date.weekday() == 0  # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        )


        if is_week_report:
            try:
                wb = load_workbook("pnl_template.xlsx")
            except FileNotFoundError:
                wb = openpyxl.Workbook()
                ws = wb.active
                ws.title = "P&L –û—Ç—á–µ—Ç"
            ws = wb.active

            # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –∏ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
            week_start = start_date
            week_end = end_date
            prev_week_start = week_start - timedelta(days=7)
            prev_week_end = week_end - timedelta(days=7)

            # –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –∏ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
            current_week_data = []
            prev_week_data = []
            for item in report_data:
                try:
                    sale_date = datetime.strptime(item.get("sale_dt", "")[:10], "%Y-%m-%d")
                    if week_start <= sale_date <= week_end:
                        current_week_data.append(item)
                    elif prev_week_start <= sale_date <= prev_week_end:
                        prev_week_data.append(item)
                except (ValueError, TypeError):
                    continue

            current_metrics = await calculate_metrics_from_report(
                current_week_data, shop_id, week_start, week_end
            )
            previous_metrics = await calculate_metrics_from_report(
                prev_week_data, shop_id, prev_week_start, prev_week_end
            )

            current_values = [
                current_metrics.get("orders", 0),
                current_metrics.get("sales", 0),
                current_metrics.get("commission", 0),
                current_metrics.get("cost_of_goods", 0),
                current_metrics.get("tax", 0),
                current_metrics.get("logistics", 0),
                current_metrics.get("storage", 0),
                current_metrics.get("stops", 0),
                current_metrics.get("advert", 0),
                current_metrics.get("revenue", 0),
                current_metrics.get("net_profit", 0)
            ]
            previous_values = [
                previous_metrics.get("orders", 0),
                previous_metrics.get("sales", 0),
                previous_metrics.get("commission", 0),
                previous_metrics.get("cost_of_goods", 0),
                previous_metrics.get("tax", 0),
                previous_metrics.get("logistics", 0),
                previous_metrics.get("storage", 0),
                previous_metrics.get("stops", 0),
                previous_metrics.get("advert", 0),
                previous_metrics.get("revenue", 0),
                previous_metrics.get("net_profit", 0)
            ]

            # C3‚ÄìC13: –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            for i, value in enumerate(current_values, 3):
                ws[f'C{i}'] = value

            # E3‚ÄìE13: –¥–∏–Ω–∞–º–∏–∫–∞ –Ω–µ–¥–µ–ª—è –∫ –Ω–µ–¥–µ–ª–µ
            for i in range(3, 14):
                curr = current_values[i-3]
                prev = previous_values[i-3]
                if prev != 0:
                    ws[f'E{i}'] = (curr - prev) / prev
                else:
                    ws[f'E{i}'] = 0 if curr == 0 else 1

            # F3‚ÄìL13: –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (F=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., L=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            for day_offset in range(7):
                day_date = week_start + timedelta(days=day_offset)
                if day_date > week_end:
                    break
                day_data = [
                    item for item in current_week_data
                    if datetime.strptime(item.get("sale_dt", "")[:10], "%Y-%m-%d").date() == day_date.date()
                ]
                if not day_data:
                    continue  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —è—á–µ–π–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—É—Å—Ç—ã–º–∏
                day_metrics = await calculate_metrics_from_report(day_data, shop_id, day_date, day_date)
                day_values = [
                    day_metrics.get("orders", 0),
                    day_metrics.get("sales", 0),
                    day_metrics.get("commission", 0),
                    day_metrics.get("cost_of_goods", 0),
                    day_metrics.get("tax", 0),
                    day_metrics.get("logistics", 0),
                    day_metrics.get("storage", 0),
                    day_metrics.get("stops", 0),
                    day_metrics.get("advert", 0),
                    day_metrics.get("revenue", 0),
                    day_metrics.get("net_profit", 0)
                ]
                col_letter = openpyxl.utils.get_column_letter(6 + day_offset)  # F=6, ..., L=12
                for row, value in enumerate(day_values, 3):
                    ws[f'{col_letter}{row}'] = value
            print("week report is active")
            return wb



        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        period_days = (end_date - start_date).days
        
        # –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–∫–æ–π –∂–µ –¥–ª–∏–Ω—ã)
        previous_start = start_date - timedelta(days=period_days)
        previous_end = start_date - timedelta(days=1)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        current_report_data = []
        for item in report_data:
            try:
                sale_date = datetime.strptime(item.get("sale_dt", "")[:10], "%Y-%m-%d")
                if start_date <= sale_date <= end_date:
                    current_report_data.append(item)
            except (ValueError, TypeError):
                continue

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏)
        previous_report_data = []
        for item in cashed_data.cashed_all:
            try:
                sale_date = datetime.strptime(item.get("sale_dt", "")[:10], "%Y-%m-%d")
                if previous_start <= sale_date <= previous_end:
                    previous_report_data.append(item)
            except (ValueError, TypeError):
                continue

        if not current_report_data:
            return None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        try:
            wb = load_workbook("pnl_template.xlsx")
        except FileNotFoundError:
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "P&L –û—Ç—á–µ—Ç"
        
        ws = wb.active

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_metrics = await calculate_metrics_from_report(current_report_data, shop_id, start_date, end_date)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏)
        previous_metrics = await calculate_metrics_from_report(previous_report_data, shop_id, previous_start, previous_end)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∏ C3-C13 (—Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥)
        current_values = [
            current_metrics.get("orders", 0),           # C3 - –ó–∞–∫–∞–∑—ã
            current_metrics.get("sales", 0),            # C4 - –í—ã–∫—É–ø—ã
            current_metrics.get("commission", 0),       # C5 - –ö–æ–º–∏—Å—Å–∏—è
            current_metrics.get("cost_of_goods", 0),    # C6 - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            current_metrics.get("tax", 0),              # C7 - –ù–∞–ª–æ–≥
            current_metrics.get("logistics", 0),        # C8 - –õ–æ–≥–∏—Å—Ç–∏–∫–∞
            current_metrics.get("storage", 0),          # C9 - –•—Ä–∞–Ω–µ–Ω–∏–µ
            current_metrics.get("stops", 0),            # C10 - –®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            current_metrics.get("advert", 0),           # C11 - –†–µ–∫–ª–∞–º–∞
            current_metrics.get("revenue", 0),          # C12 - –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é (–≤—ã—Ä—É—á–∫–∞)
            current_metrics.get("net_profit", 0)        # C13 - –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        ]

        # –ó–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏)
        previous_values = [
            previous_metrics.get("orders", 0),           # –ó–∞–∫–∞–∑—ã
            previous_metrics.get("sales", 0),            # –í—ã–∫—É–ø—ã  
            previous_metrics.get("commission", 0),       # –ö–æ–º–∏—Å—Å–∏—è
            previous_metrics.get("cost_of_goods", 0),    # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            previous_metrics.get("tax", 0),              # –ù–∞–ª–æ–≥
            previous_metrics.get("logistics", 0),        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
            previous_metrics.get("storage", 0),          # –•—Ä–∞–Ω–µ–Ω–∏–µ
            previous_metrics.get("stops", 0),            # –®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            previous_metrics.get("advert", 0),           # –†–µ–∫–ª–∞–º–∞
            previous_metrics.get("revenue", 0),          # –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é (–≤—ã—Ä—É—á–∫–∞)
            previous_metrics.get("net_profit", 0)        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        ]

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏ C3-C13 (—Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥)
        for i, value in enumerate(current_values, 3):
            ws[f'C{i}'] = value

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∏–Ω–∞–º–∏–∫—É –≤ —è—á–µ–π–∫–∏ E3-E13
            # –§–æ—Ä–º—É–ª–∞: (—Ç–µ–∫—É—â–∏–π - –ø—Ä–µ–¥—ã–¥—É—â–∏–π) / –ø—Ä–µ–¥—ã–¥—É—â–∏–π
            for i in range(3, 14):
                current_val = current_values[i-3]
                previous_val = previous_values[i-3]
                
                if previous_val != 0:
                    dynamic = (current_val - previous_val) / previous_val
                    ws[f'E{i}'] = dynamic
                else:
                    # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –∏–ª–∏ 1
                    ws[f'E{i}'] = 0 if current_val == 0 else 1

            # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú: –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏ C3-C13 (—Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥)
            for i, value in enumerate(current_values, 3):
                ws[f'C{i}'] = value

            # –î–û–ë–ê–í–õ–Ø–ï–ú: –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞ (F3-F13, G3-G13, –∏ —Ç.–¥.)
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º –ø–µ—Ä–∏–æ–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂
            sorted_dates = []
            current_date = start_date.date()
            while current_date <= end_date.date():
                sorted_dates.append(current_date)
                current_date += timedelta(days=1)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–≤—ã —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –Ω–æ–º–µ—Ä—É
            def get_column_letter(column_number):
                """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤—É (A=1, B=2, ..., Z=26, AA=27, AB=28, ...)"""
                result = ""
                while column_number > 0:
                    column_number -= 1
                    result = chr(65 + (column_number % 26)) + result
                    column_number //= 26
                return result

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
            for day_index, current_date in enumerate(sorted_dates):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
                daily_data = []
                for item in cashed_data.cashed_all:
                    try:
                        sale_date = datetime.strptime(item.get("sale_dt", "")[:10], "%Y-%m-%d")
                        if sale_date.date() == current_date:
                            daily_data.append(item)
                    except (ValueError, TypeError):
                        continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
                daily_metrics = await calculate_metrics_from_report(daily_data, shop_id, current_date, current_date)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü (F=6, G=7, H=8, –∏ —Ç.–¥.)
                column_number = 6 + day_index  # F=6, G=7, H=8, ..., Z=26, AA=27, AB=28, ...
                column_letter = get_column_letter(column_number)
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∏ F3-F13, G3-G13, –∏ —Ç.–¥.
                daily_values = [
                    daily_metrics.get("orders", 0),           # –ó–∞–∫–∞–∑—ã
                    daily_metrics.get("sales", 0),            # –í—ã–∫—É–ø—ã  
                    daily_metrics.get("commission", 0),       # –ö–æ–º–∏—Å—Å–∏—è
                    daily_metrics.get("cost_of_goods", 0),    # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                    daily_metrics.get("tax", 0),              # –ù–∞–ª–æ–≥
                    daily_metrics.get("logistics", 0),        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                    daily_metrics.get("storage", 0),          # –•—Ä–∞–Ω–µ–Ω–∏–µ
                    daily_metrics.get("stops", 0),            # –®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                    daily_metrics.get("advert", 0),           # –†–µ–∫–ª–∞–º–∞
                    daily_metrics.get("revenue", 0),          # –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é (–≤—ã—Ä—É—á–∫–∞)
                    daily_metrics.get("net_profit", 0)        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
                ]
                
                for i, value in enumerate(daily_values, 3):
                    ws[f'{column_letter}{i}'] = value

            return wb
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNL –æ—Ç—á–µ—Ç–∞: {e}")
        return None
    finally:
        session.close()

# –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞
# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculate_metrics_from_report –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–µ—Ç—Ä–∏–∫
async def calculate_metrics_from_report(report_data, shop_id, start_date, end_date):
    session = sessionmaker()(bind=engine)
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        revenue = 0
        logistics = 0
        storage_fee = 0
        commission = 0
        cost_of_goods = 0
        orders = 0
        sales = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        articles = {}
        for item in report_data:
            # –í—ã—Ä—É—á–∫–∞
            retail_price = item.get('retail_price_withdisc_rub', 0)
            quantity = item.get('quantity', 0)
            revenue += retail_price * quantity
            
            # –ó–∞–∫–∞–∑—ã –∏ –ø—Ä–æ–¥–∞–∂–∏
            doc_type = item.get("doc_type_name", "")
            if "–ø—Ä–æ–¥–∞–∂–∞" in doc_type.lower() or "sale" in doc_type.lower():
                sales += quantity
            orders += quantity
            
            # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
            logistics += item.get('delivery_rub', 0)
            
            # –•—Ä–∞–Ω–µ–Ω–∏–µ
            storage_fee += item.get('storage_fee', 0)
            
            # –ö–æ–º–∏—Å—Å–∏—è WB
            commission += item.get('ppvz_sales_commission', 0) + item.get('ppvz_vw', 0) + item.get('ppvz_vw_nds', 0)
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
            article = item.get('nm_id')
            if article:
                if article not in articles:
                    articles[article] = 0
                articles[article] += quantity
        
        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        for article, quantity in articles.items():
            product_cost = session.query(ProductCost).filter(
                ProductCost.shop_id == shop_id,
                ProductCost.article == article
            ).first()
            if product_cost:
                cost_of_goods += product_cost.cost * quantity
        
        # –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        tax_setting = session.query(TaxSystemSetting).filter(
            TaxSystemSetting.shop_id == shop_id
        ).first()
        
        if tax_setting:
            if tax_setting.tax_system == TaxSystemType.USN_6:
                tax_rate = 0.06
                print("tax_rate = ", tax_rate)
            elif tax_setting.tax_system == TaxSystemType.NO_TAX:
                tax_rate = 0.0
                print("tax_rate = ", tax_rate)
            elif tax_setting.tax_system == TaxSystemType.CUSTOM:
                tax_rate = tax_setting.custom_percent / 100 #if tax_setting.custom_percent else 0.0
                print("tax_rate = ", tax_rate)
            else:
                tax_rate = 0.0
                print("–ø–æ—à–ª–æ –≤ else")
        else:
            tax_rate = 0.0
            
        tax = revenue * tax_rate
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        regular_expenses = 0
        days_in_period = (end_date - start_date).days + 1
        for expense in session.query(RegularExpense).filter(RegularExpense.shop_id == shop_id):
            if expense.frequency == "daily":
                regular_expenses += expense.amount * days_in_period
            elif expense.frequency == "weekly":
                regular_expenses += expense.amount * (days_in_period / 7)
            elif expense.frequency == "monthly":
                regular_expenses += expense.amount * (days_in_period / 30)

        # –†–µ–∫–ª–∞–º–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        advert = sum(
            i.amount for i in session.query(Advertisement)
            .filter(Advertisement.shop_id == shop_id)
            .filter(Advertisement.date >= start_date)
            .filter(Advertisement.date <= end_date)
            .all()
        )

        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        stops = sum(
            i.sum for i in session.query(Penalty)
            .filter(Penalty.shop_id == shop_id)
            .filter(Penalty.date >= start_date)
            .filter(Penalty.date <= end_date)
            .all()
        )

        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        net_profit = revenue - (commission + logistics + storage_fee + tax + cost_of_goods + regular_expenses + advert + stops)
        
        # –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (–¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É)
        profitability = (net_profit / revenue) * 100 if revenue > 0 else 0
        
        # –†–∞–∑–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ)
        one_time_expenses = session.query(OneTimeExpense).filter(OneTimeExpense.shop_id == shop_id).all()
        total_one_time = sum(expense.amount for expense in one_time_expenses)
        
        # –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        if net_profit > 0 and total_one_time > 0:
            months = total_one_time / net_profit
            payback_period = f"{months:.1f} –º–µ—Å—è—Ü–µ–≤"
        
        # ROI
        roi = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        if total_one_time > 0:
            roi_value = (net_profit / total_one_time) * 100
            roi = f"{roi_value:.1f}%"
            if roi_value > 100:
                roi += " ‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –æ–∫—É–ø–∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è!"
        
        return {
            "revenue": revenue,
            "commission": commission,
            "logistics": logistics,
            "storage": storage_fee,
            "cost_of_goods": cost_of_goods,
            "tax": tax,
            "regular_expenses": regular_expenses,
            "net_profit": net_profit,
            "profitability": profitability,  # ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û
            "payback_period": payback_period,  # ‚Üê –ò –≠–¢–û
            "roi": roi,  # ‚Üê –ò –≠–¢–û
            "advert": advert,
            "stops": stops,
            "orders": orders,
            "sales": sales
        }
    finally:
        session.close()
        session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
async def select_pnl_period_callback(callback: types.CallbackQuery, state: FSMContext):
    period_type = callback.data.split('_')[1]  # day, week, month, year
    await callback.message.edit_text(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 10 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–º –ø–æ–¥—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö... (–∏–Ω–æ–≥–¥–∞ –¥–æ–ª—å—à–µ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 2—Ö –º–∏–Ω—É—Ç)")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
    now = datetime.utcnow()
    if period_type == "week":
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        start_week = now - timedelta(days=now.isoweekday() - 1)
        start_date = datetime(start_week.year, start_week.month, start_week.day)
        end_date = now
        #start_date = (now - timedelta(days=now.weekday())).replace(hour=0, minute=0, second=0, microsecond=0)
        period_name = "–Ω–µ–¥–µ–ª—é"
    elif period_type == "month":
        #start_date = now - relativedelta(months=1)
        start_date = datetime(now.year, now.month, 1)
        end_date = now
        period_name = "–º–µ—Å—è—Ü"
    elif period_type == "year":
        now = datetime.utcnow()
        #start_date = datetime(now.year, 1, 1)
        start_date = datetime(now.year, 1, 1)
        end_date = now
        period_name = "–≥–æ–¥"
    else:  # year
        start_date = now - relativedelta(years=1)
        end_date = now
        period_name = "–≥–æ–¥"
    
    async with state.proxy() as data:
        shop_id = data['shop']['id']
        shop_name = data['shop']['name'] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.edit_text(
        f"üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PNL –æ—Ç—á–µ—Ç–∞</b>\n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
        f"–ü–µ—Ä–∏–æ–¥: –∑–∞ {period_name}\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
    )
    
    # –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:
    async with state.proxy() as data:
        shop_id = data['shop']['id']
        shop_name = data['shop']['name'] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
        shop_api_token = data['shop']['api_token']


    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
    wb = await generate_pnl_excel_report(shop_id, shop_api_token, start_date, end_date, shop_name)
    
    if not wb:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            "2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "3. –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ pnl_template.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    file_stream = io.BytesIO()
    wb.save(file_stream)
    file_stream.seek(0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    safe_shop_name = "".join(c for c in shop_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    filename = f"pnl_{safe_shop_name}_{datetime.now().strftime('%Y%m%d%H%M')}.xlsx"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = InputFile(file_stream, filename=filename)
    await callback.message.answer_document(
        file,
        caption=f"üìä PNL –æ—Ç—á–µ—Ç –∑–∞ {period_name}\n–ú–∞–≥–∞–∑–∏–Ω: {shop_name}"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é PNL
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pnl"))
    await callback.message.answer("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!", reply_markup=keyboard)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞
async def pnl_excel_callback(callback: types.CallbackQuery, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
    now = datetime.utcnow()
    if period_type == "week":
        start_week = now - timedelta(days=now.isoweekday() - 1)
        start_date = datetime(start_week.year, start_week.month, start_week.day)

        #start_date = now - timedelta(weeks=1)
        end_date = now
        period_name = "–Ω–µ–¥–µ–ª—é"
    elif period_type == "month":
        # –° 1 —á–∏—Å–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        #start_date = now.replace(day=1)  # ‚Üê –ò–ó–ú–ï–ù–ò–¢–¨ –ù–ê –≠–¢–û
        start_date = datetime(now.year, now.month, 1)
        end_date = now
        period_name = "–º–µ—Å—è—Ü"
    else:  # year
        #start_date = now - relativedelta(years=1)
        start_date = datetime(now.year, 1, 1)
        end_date = now
        period_name = "–≥–æ–¥"
    
    async with state.proxy() as data:
        shop_id = data['shop']['id']
        shop_name = data['shop']['name'] or f"–ú–∞–≥–∞–∑–∏–Ω {shop_id}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.edit_text(
        f"üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PNL –æ—Ç—á–µ—Ç–∞</b>\n\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}\n"
        f"–ü–µ—Ä–∏–æ–¥: –∑–∞ {period_name}\n\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
    wb = await generate_pnl_excel_report(shop_id, start_date, end_date, shop_name)
    
    if not wb:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            "2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "3. –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ pnl_template.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    file_stream = io.BytesIO()
    wb.save(file_stream)
    file_stream.seek(0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    safe_shop_name = "".join(c for c in shop_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    filename = f"pnl_{safe_shop_name}_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = InputFile(file_stream, filename=filename)
    await callback.message.answer_document(
        file,
        caption=f"üìä PNL –æ—Ç—á–µ—Ç –∑–∞ {period_name}\n–ú–∞–≥–∞–∑–∏–Ω: {shop_name}"
    )


def register_pnl_handlers(dp):
    dp.register_callback_query_handler(pnl_callback, text="pnl", state="*")
    dp.register_callback_query_handler(
        select_pnl_period_callback, 
        lambda c: c.data.startswith("pnlperiod_"), 
        state=PNLStates.waiting_for_period
    )
    dp.register_callback_query_handler(
        pnl_excel_callback,
        lambda c: c.data.startswith("pnl_excel_"),
        state="*"
    )
